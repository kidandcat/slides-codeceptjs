ParcelJS
Empaquetadores

Jairo Caro-Accino Viciana
Blockchain Developer at Algorath

jairocaro@msn.com

https://github.com/kidandcat

@kidandcat


* ParcelJS

- Qué es un empaquetador
- Por qué los necesitamos
- Automatizadores de tareas, los antepasados
- Webpack
- Parcel
- Creando una aplicación React desde cero


* Qué es un empaquetador

El empaquetador es una herramienta que se va a encargar de:

- Aplicar transformaciones (ES6, sass, coffeescript, typescript, etc)

- Compilar el código javascript y ponerlo en un solo fichero (incluidas todas las dependencias)

- Minificar todo nuestro CSS y ponerlo en un solo fichero


* Por qué los necesitamos

Hoy en día cuando creamos una aplicación de frontend, o incluso una simple página web, queremos usar un montón de dependencias (código de otras personas) que nos facilitan enormemente el trabajo que tenemos que realizar.

Ejemplos:

- Frameworks (React, Angular, Vue, etc)

- Preprocesadores (SASS, LESS, etc)

- Transformadores (Babel, Typescript, etc)

- Componentes (Material-ui, Fluent design)


.link https://material-ui.com/demos/buttons/ Material UI
.link https://www.react-uwp.com Fluent design 


* Automatizadores de tareas, los antepasados

Antes de los empaquetadores, cuando empezó a surgir una miríada de frameworks, librerias y herramientas para el frontend, aparecieron unas herramientas para facilitarnos nuestro flujo de despliegue.

Los automatizadores de tareas

.link https://gulpjs.com/ Gulp


* Webpack

Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. 

.link https://webpack.js.org/ Webpack

.link https://webpack.js.org/guides/typescript/ Ejemplo: usar typescript



* Parcel

.link https://parceljs.org/ Blazing fast, zero configuration web application bundler

Ejecuta parcel index.html para iniciar un servidor de desarrollo. Importar JavaScript, CSS, imágenes y más funciona sin necesidad de configurar nada! 👌


* Creando una aplicación React desde cero

index.html

    <!DOCTYPE html>
    <body>
        <div id="root"></div>
        <script src="./App.jsx"></script>
    </body>
    </html>

App.jsx

    import React from "react";
    import ReactDOM from "react-dom";

    export class App extends React.Component {
        render(){
            return <div>Hello world!</div>
        }
    }

    ReactDOM.render(<App />, document.querySelector("#app"))

* Añadir typescript

App.jsx -> App.tsx

    import * as React from "react";
    import * as ReactDOM from "react-dom";

    export class App extends React.Component {
        render(){
            return <div>Hello world!</div>
        }
    }

    ReactDOM.render(<App />, document.querySelector("#app"))

index.html

        <script src="./App.tsx"></script>
